#svl

//STRUCTURE BASED PHARMACOPHORE
//
//To use: enter function and arguments into SVL window, hit enter. When the ph4 editor presents itself, click 'feature' then 'OK'.
//Wait for any AtomQ features to be selected and then click the red X to delete them.

function Close;
function Open;
function prolig_Calculate;
function pro_Contacts;
function db_ImportASCII;
function ph4_aType;
function ph4_EditorWkeyList;
function ph4_EditorGetData;
function fwrite_PH4;

global function SBP_5feats [receptor, database_file, sortfield]
//receptor is _minrec.moe, database_file is output.mdb, sortfield is scoring type, max_i is number of fragments to bring in
local features_length = 0;
local max_i = 1; //change starting fragments, default = 1

Close [force:1, viewreset:1, delgobj:1];  // close any open structures
Open receptor;

// open sitefinder
	local tcount = 0;
	local tatoms = [];
	loop
		tcount = tcount + 1;
		Open '$MOE/svl/run/sitefind.svl';
		local wkey2 = WindowKeyList[];
		if tcount = 1 then 
			WindowTrigger [wkey2, [panel:'Apply']];
		endif
		
		WindowTrigger [wkey2, [disp_aselect:1]];
		sleep 0.5;
	if notnull SelectedAtoms[] then break;
	endif
	endloop;
	
	sleep 1;
	WindowDestroy wkey2;


	local site_center = oCentroid SelectedAtoms[];
	local site_dum = mol_Create [ 'BP Centroid', [ 'centroid', '', '', 1 ], // create a dummy atom representing the centroid of the BP
			[ '*', 1, " ", 'none', 1 ], 
			[ 'LP', 0, 'sp', 0, 0, [ [] ], 0, 'DU', 0, site_center(1),site_center(2),site_center(3) ] ];
	aSetSelected [Atoms[], 0];
	site_dum = cAtoms site_dum;
	
	//BP Centroid has been created

while features_length < 5 loop // change minimum feature number
	max_i = max_i + 1;
	local entry_key, entry, x;
	local mdb_key = db_Open [database_file, 'read-write']; //open database with fragments
	//db_Sort [mdb_key, sortfield, 0]; //sort field by ascending
	db_Sort [mdb_key, [sortfield, 'Q_PC-'], [0,1]]; //sort fields by score then charge, ascending
	local entries = db_Entries database_file;
	local scores = [];
	local centroids = [];
	local dummies = [];
	local i=0;
	for entry in entries while i < max_i loop // loop creates max_i number of fragments
		local [ligand] =db_ReadFields [mdb_key, entry,'mol']; //get structure from fieldname
		local [ligand_chain, ligand_name] =db_CreateMolecule ligand;
		local centroid = oCentroid ligand_chain;
		local dum = mol_Create [ '', [ 'frag. centroid', '', '', 1 ], // create a centroid dummy atom for each fragment
			[ '*', 1, " ", 'none', 1 ], 
			[ 'LP', 0, 'sp', 0, 0, [ [] ], 0, 'DU', 0, centroid(1),centroid(2),centroid(3) ] ];
		scores = append[scores, db_ReadFields [mdb_key, entry, sortfield]];
		dummies = cat [dummies, cAtoms dum];
		i = i+1;
	
	endloop
	
	//frag dummies have been created
	
	aSetSelected [dummies,1];
	local matrix = aDist [tr dummies, dummies];
	local matrix2 = aDist [site_dum, dummies]; // distance matrix with distance from BP centroid to fragments
	i=0;
	local cnums = cNumber oParent oParent dummies;
	local chains = Chains[];
	local dummydist;
	local frag_delete = [];
	local dum_delete = [];
	local scores2 = scores; 


	// FRAGMENT TO CENTROID CHECK
	for dummydist in matrix2 loop // find fragments that are far (>10 A) from the center of the binding site
		i=i+1;
		local fnum = cNumber chains(cnums(i)-1);
		if dummydist > 10 and scores(i) == 0 and freq [0, scores2] > 1 then // if the dummy atom is 10 Ang. from the BP, delete it and its corresponding dummy atom
			print cat['dummydist:', dummydist];
			oDestroy [cAtoms chains(cnums(i)-1)];
			oDestroy [cAtoms chains(cnums(i))];
			scores2 = dropfirst scores2; // drop 0 score
			write ['Deleted {} because of distance from centroid.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
		elseif dummydist > 10 and scores(i) == 0 then
			print cat['dummydist:', dummydist];
			oDestroy [cAtoms chains(cnums(i)-1)];
			oDestroy [cAtoms chains(cnums(i))];
			scores2 = dropfirst scores2; // drop 0 score
			write ['Deleted {} because of distance from centroid.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
		elseif dummydist > 10 then
			print cat['dummydist:', dummydist];
			oDestroy [cAtoms chains(cnums(i)-1)];
			oDestroy [cAtoms chains(cnums(i))];
			scores2 = diff[scores2, scores(i)]; // remove deleted fragment's score from score matrix
			write ['Deleted {} because of distance from centroid.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
		endif
	endloop
	
	
	fnum = [];
	dummies = SelectedAtoms[]; // assign new dummy vector WITHOUT dummies that were too far from the centroid
	aSetSelected [Atoms[], 0]; // deselect dummies
	//aSetSelected [frag_delete, 1];
	
	//oDestroy frag_delete; // delete fragments that are too far away from BP centroid
	//oDestroy dum_delete; // delete dummy atoms associated with said fragments
	
	// END FRAGMENT TO CENTROID CHECK

	
	aSetSelected [dummies, 1];
	local dum_chains = oParent oParent dummies; // create vector of dummy atoms chains so they can be deleted if they don't fit the distance cutoff
	matrix = aDist [tr dummies, dummies]; // new distance matrix based on refreshed dummy vector
	
	local mat_scored = [scores: scores2, dist: matrix]; // assign mat_scored.scores as scores2, the vector containing scores of fragments that haven't been deleted. Scores and dist matrix should be the same size
	chains = Chains[];
	local d, r;
	frag_delete = [];
	i=0; 	// reset count for new loop
	cnums = cNumber oParent oParent dummies;

	for d in mat_scored.dist loop // loop through remainining fragments to see which overlap or are too far from other fragments. 
				      // scores2 remains the same and is checked, while mat_scored.scores is changed
		d = pack d;
		local fragtypes = rName cResidues dropfirst Chains[];
		local ft = fragtypes <> '*';
		//print cat['d:', d];
		i = i+1;
		local s = scores2(i);
		fnum = cNumber chains(cnums(i)-1);

		if length pack (d < 0.5) > 0 and scores2(i) == 0 and freq [0, mat_scored.scores] > 1 and (fnum-1)/2 <> 1 then // fragments that overlap and have the same score
			oDestroy cAtoms chains(cnums(i)-1); // destroy fragment atoms (doesn't destroy fragment chain which ensures correct numbering ((fragment is before dummy chain, hence i-1)))
			dummies = diff[dummies, cAtoms dum_chains(i)]; // reassign new dummy vector by dropping deleted dummy for new distance calc.
			oDestroy cAtoms dum_chains(i); // destroy the dummy atom associated with the deleted fragment, necessary for new distance calculation
			write ['Deleted {} because of overlap.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
			print cat['d:', d];
			mat_scored.scores = dropfirst mat_scored.scores;
			if length dummies == 1 then print [];
				else
				print dummies;
				mat_scored.dist = aDist [tr dummies, dummies];
			endif
			
			
		elseif length pack (d < 0.5) > 0 and anytrue (scores2(i) > mat_scored.scores) and (fnum-1)/2 <> 1 then	
			oDestroy cAtoms chains(cnums(i)-1); // destroy fragment atoms (doesn't destroy fragment chain which ensures correct numbering ((fragment is before dummy chain, hence i-1)))
			dummies = diff[dummies, cAtoms dum_chains(i)];  // reassign new dummy vector by dropping deleted dummy for new distance calc.
			oDestroy cAtoms dum_chains(i);
			write ['Deleted {} because of overlap and score.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
			print cat['d:', d];
			mat_scored.scores = diff[mat_scored.scores, mat_scored.scores(indexof[s, mat_scored.scores])];
			if length dummies == 1 then print [];
				else
				print dummies;
				mat_scored.dist = aDist [tr dummies, dummies];
			endif
			//print cat['new_dist:',mat_scored.dist];


		elseif length pack (d < 15) <= 1 and scores2(i) == 0 and length pack ft <> 2  and (fnum-1)/2 <> 1 then //and anytrue (mat_scored.scores(i) > mat_scored.scores) then
			oDestroy cAtoms chains(cnums(i)-1); // destroy fragment atoms (doesn't destroy fragment chain which ensures correct numbering ((fragment is before dummy chain, hence i-1)))
			dummies = diff[dummies, cAtoms dum_chains(i)];  // reassign new dummy vector by dropping deleted dummy for new distance calc.
			oDestroy cAtoms dum_chains(i);
			write ['Deleted {} because of distance from other fragments.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
			print cat['d:', d];
			mat_scored.scores = dropfirst mat_scored.scores;
			if length dummies == 1 then print [];
				else
				print dummies;
				mat_scored.dist = aDist [tr dummies, dummies];
			endif
	

		elseif length pack (d < 15) <= 1 and length pack ft <> 2  and (fnum-1)/2 <> 1 then
			oDestroy cAtoms chains(cnums(i)-1); // destroy fragment atoms (doesn't destroy fragment chain which ensures correct numbering ((fragment is before dummy chain, hence i-1)))
			dummies = diff[dummies, cAtoms dum_chains(i)];  // reassign new dummy vector by dropping deleted dummy for new distance calc.
			oDestroy cAtoms dum_chains(i);
			write ['Deleted {} because of distance from other fragments.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
			print cat['d:', d];
			mat_scored.scores = diff[mat_scored.scores, mat_scored.scores(indexof[s, mat_scored.scores])];
			if length dummies == 1 then print [];
				else
				print dummies;
				mat_scored.dist = aDist [tr dummies, dummies];
			endif


		endif
	endloop
	
	
	aSetSelected [Atoms[], 0];
		

	chains = Chains[];
	local [rec_atoms] = cAtoms chains(1); // get receptor atoms
	local frags = dropfirst chains; // create subset of just fragments
	local frag_chain;
	local ligkeys = cat cAtoms frags;
	local dummy_mask = aElement ligkeys <> 'LP';
	ligkeys = ligkeys | dummy_mask;
	//aSetSelected [ligkeys, 1];
	local use_frags = [];
	local sel_atoms = []; // empty vector for fragment atoms that are to be selected
	
	local itypes = ['Hbond', 'Metal', 'Ionic', 'Covalent', 'Arene', 'Distance'];
    	local iopt = [
	emin_hb:	    minE[-0.1, 0.10],
	emin_hpi:	    minE[-0.1, 0.10],
	emin_ion:	    0.10,
	distance_threshold: 4.5,
	layoutrechb:	    1	// incl. rec-rec hbond in layout
    ];

	
	//from prolig2d.svl, calculates fragments with strong interactions
	local iract = prolig_Calculate [itypes, ligkeys, rec_atoms, iopt];
	local [iract_2, iract_3] = [iract(2), iract(3)];
	local lrmask = indexof [iract_2, ligkeys] and indexof [iract_3, rec_atoms];
	local rlmask = indexof [iract_3, ligkeys] and indexof [iract_2, rec_atoms];
	local mask = andE [indexof [iract(1), ['Hbond', 'Metal', 'Ionic', 'Covalent']],lrmask or rlmask];
	local s_lim = select [iract(2), iract(3), lrmask] | mask;	// multi atom
   	local s_rim = select [iract(3), iract(2), lrmask] | mask;	// for arene
	local s_score = iract(4) | mask;
	aSetSelected [s_lim,1]; //select atoms that have strong interactions
	
	write ['Fragments with strong interactions: {} \n', uniq cat [cName oParent oParent s_lim]]; 
	local atom;
	local ring_centroids = [];
	
	for atom in s_lim loop // for atoms with strong interactions
		//print aElement atom;
		if [aIn6Ring atom] == 1 then // 6-ring fragments have hydrophobic centers, making a dummy atom conserves the Hyd center while allowing for removal of the AtomQ queries which are unnecessary
			rSetSelected [oParent atom, 1];
			centroid = oCentroid [oParent atom];
			local mol = mol_Create [ '', [ '', '', '', 1 ], 
			[ '*', 1, " ", 'none', 1 ], 
			[ 'LP', 0, 'sp', 0, 0, [ [] ], 0, 'DU', 0, centroid(1),centroid(2),centroid(3) ] ];
			ring_centroids = cat[ring_centroids, cAtoms last Chains[]];
		endif
	endloop
	
	aSetSelected [ring_centroids,1]; //select centroids
	
	

	local atoms = SelectedAtoms[];
	local atoms_type = ph4_aType atoms;
	local info = [atoms: atoms, atype: atoms_type];
	i=1;
	
	//return;

	
	//run ph4 editor
	run '$MOE/svl/run/ph4_edit_2.svl';
	local wkey = ph4_EditorWkeyList [];
	WindowShow wkey;
	if notnull SelectedAtoms[] == 1 then
		WindowTrigger [wkey, [create_F:1024]];
			loop 
				chains = Chains[];
				local [features] = cAtoms last droplast chains;
 				until notnull features
			endloop
	endif

	chains = Chains[];
	
	
	local data = ph4_EditorGetData wkey;
	local feat = [atoms: features, names: data.F.expr];
	
	local feat_name;
	local feat_delete = [];
	i=0;
	for feat_name in feat.names loop
		i=i+1;
		if feat_name == 'AtomQ' then
			feat_delete = cat [feat_delete,feat.atoms(i)];
		endif
	endloop
	
	
	aSetSelected [Atoms[],0]; //deselect all features
	aSetSelected [feat_delete,1]; //select AtomQ features to be deleted
	//return;
	sleep 2;
	local nvp = WindowValues wkey;
	local mainlist = nvp.mainlist(1);
	//print cat ['mainlist', length mainlist];
	//print cat ['feat.atoms', length feat.atoms];
	local tf = feat.names == 'AtomQ';
	loop
		if alltrue tf == 1 then
			WindowTrigger [wkey, [button_delete:1024]];
			//print 2;
			break;
		elseif  length mainlist == length feat.atoms then // if selected atoms are all AtomQ then
			nvp = WindowValues wkey;
			//print 1;
			mainlist = nvp.mainlist(1);
			//print mainlist;
			break;
		elseif length mainlist < length feat.atoms then // if the mainlist length is less than the length of the feature atoms
			WindowTrigger [wkey, [button_delete:1024]];
			//print 2;
			break;
		elseif length mainlist == 1 then
			WindowDestroy wkey;
			//print 3;
			break;
		endif
	endloop


// ADD AtomQ Features for -S, -Cl, -F if necessary
// Slows things down and makes ph4 way less specific, don't use
//	local fragments = dropfirst Chains[];
//	local fragmentatoms = Atoms[fragments];
//	local sulf_mask = aElement fragmentatoms == 'S';
//	local cl_mask = aElement fragmentatoms == 'Cl';
//	local fl_mask = aElement fragmentatoms == 'F';
//	local sulf_atoms = fragmentatoms | sulf_mask;
//	local cl_atoms = fragmentatoms | cl_mask;
//	local fl_atoms = fragmentatoms | fl_mask;

//	print s_lim;
//	print sulf_atoms;
//	if notnull sulf_atoms == 1 then
//		aSetSelected [join [sulf_atoms, s_lim], 1];
//	endif
	
//	if notnull cl_atoms == 1 then
//		aSetSelected [join [cl_atoms, s_lim], 1];
//	endif
	
//	if notnull fl_atoms == 1 then
//		aSetSelected [join [fl_atoms, s_lim], 1];
//	endif
	
	
		//return;
//		WindowTrigger [wkey, [create_F:1024]];
//		loop 
//			chains = Chains[];
//			[features] = cAtoms last droplast chains;
// 			until notnull features
//		endloop
	//return;
	
	


	data = ph4_EditorGetData wkey;
	fwrite_PH4 [tok_cat [sortfield,'.ph4'], data, [header:1]];
	[features] = cAtoms last droplast Chains[];
	features_length = length features;
	print cat['features:',features_length];
	sleep 2;
	if wkey == ph4_EditorWkeyList [] then
		WindowDestroy wkey;
	endif;
	
	if features_length < 5 then
		oDestroy dropfirst dropfirst Chains[]; // destroy everything except the receptor
	endif
endloop;
	
write ['Done.\n'];
	
endfunction
