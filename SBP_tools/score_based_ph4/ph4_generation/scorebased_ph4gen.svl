#svl
//Commentary by Greg Szwabowski 2/15/22

//This script is used to generate pharmacophore models using fragments placed
//with the MultiFragment Search tool. Each MFSS output is sorted by 4 different 
//scores:
//	1. dE(class)
//	2. dE
//	3. dU(class)
//	4. dU
//
//For each iteration of this script, the MFSS output database will be sorted
//by 1 of the 4 scores and pharmacophore models will be created. For each loop
//of pharmacophore model generation, n+1 fragments will be created (starting with
//n = 0) in the system and pharmacophore feature distances will be compared.
//Fragments that do not fit the specified distance cutoffs will be removed 
//from the system. Any remaining fragment atoms possessing interactions
//with the receptor will then be annotated as pharmacophore model features.
//This process repeats until 7 features are present in the pharmacophore
//model.

//Make sure to check that the top ranked site in Site Finder is your desired
//site prior to running this script.

//Script Arguments
//================
//fragment_sets: 0 if using a single output .mdb and receptor,
//		 1 if generating pharmacophore models in a directory containing subdirectories with differing MFSS outputs.

//Prerequisites to run this script
//===============================
//If generating pharmacophore models for a single structure:
// - Prepared receptor structure
// - MFSS output database
//
//If generating pharmacophore models for multiple MFSS outputs, each in their own subdirectory:
// - Subdirectories each containing:
// 	+ a receptor model suffixed _minrec.moe
//	+ an MCSS output database suffixed _output.mdb that contains fragments

function ph4_Search;
function Close;
function Open;
function prolig_Calculate;
function pro_Contacts;
function db_ImportASCII;
function ph4_aType;
function ph4_EditorWkeyList;
function ph4_EditorGetData;
function fwrite_PH4;
function QuaSAR_DescriptorMDB;
function feature_search_dir_7feats;
function pharmacount_dir;

///////////////////PHARMACOPHORE GENERATION////////////////////////
	local function SBP_7feats [receptor, database_file, sortfield]
	local features_length = 0;
	local max_i = 0; //change starting fragments, default = 0

	QuaSAR_DescriptorMDB [database_file, 'mol' , 'ASA_H'];

	Close [force:1, viewreset:1, delgobj:1];  // close any open structures
	Open receptor;

	logfile tok_cat [receptor, '_', sortfield, '.txt'];
	// open sitefinder
	local tcount = 0;
	local tatoms = [];
	loop
		tcount = tcount + 1;
		Open '$MOE/svl/run/sitefind.svl';
		local wkey2 = WindowKeyList[];
		if tcount = 1 then 
			WindowTrigger [wkey2, [panel:'Apply']];
		endif
		
		WindowTrigger [wkey2, [disp_aselect:1]];
		sleep 0.5;
	if notnull SelectedAtoms[] then break;
	endif
	endloop;
	
	sleep 1;
	WindowDestroy wkey2;


	local site_center = oCentroid SelectedAtoms[];
	local site_dum = mol_Create [ 'BP Centroid', [ 'centroid', '', '', 1 ], // create a dummy atom representing the centroid of the BP
			[ '*', 1, " ", 'none', 1 ], 
			[ 'LP', 0, 'sp', 0, 0, [ [] ], 0, 'DU', 0, site_center(1),site_center(2),site_center(3) ] ];
	aSetSelected [Atoms[], 0];
	site_dum = cAtoms site_dum;
	
	//BP Centroid has been created

	while features_length < 7 loop // change minimum feature number, default is 7
		max_i = max_i + 1;
		local entry_key, entry, x;
		local mdb_key = db_Open [database_file, 'read-write']; //open database with fragments

		db_Sort [mdb_key, [sortfield, 'ASA_H'], [0,1]]; //sort fields by score (ascending) then ASA_H (descending)
		local entries = db_Entries database_file;
		local scores = [];
		local centroids = [];
		local dummies = [];
		local i=0;
		for entry in entries while i < max_i loop // loop creates max_i number of fragments
			local [ligand] =db_ReadFields [mdb_key, entry,'mol']; //get structure from fieldname
			local [ligand_chain, ligand_name] =db_CreateMolecule ligand;
			local centroid = oCentroid ligand_chain;
			local dum = mol_Create [ '', [ 'frag. centroid', '', '', 1 ], // create a centroid dummy atom for each fragment
				[ '*', 1, " ", 'none', 1 ], 
				[ 'LP', 0, 'sp', 0, 0, [ [] ], 0, 'DU', 0, centroid(1),centroid(2),centroid(3) ] ];
			scores = append[scores, db_ReadFields [mdb_key, entry, sortfield]];
			dummies = cat [dummies, cAtoms dum];
			i = i+1;
		
		endloop
		
		//frag dummies have been created
		
		aSetSelected [dummies,1];
		local matrix = aDist [tr dummies, dummies];
		local matrix2 = aDist [site_dum, dummies]; // distance matrix with distance from BP centroid to fragments
		i=0;
		local cnums = cNumber oParent oParent dummies;
		local chains = Chains[];
		local dummydist;
		local frag_delete = [];
		local dum_delete = [];
		local scores2 = scores; 


		// FRAGMENT TO CENTROID CHECK
		for dummydist in matrix2 loop // find fragments that are far (>10 A) from the center of the binding site
			i=i+1;
			local fnum = cNumber chains(cnums(i)-1);
			if dummydist > 10 and scores(i) == 0 and freq [0, scores2] > 1 then // if the dummy atom is 10 Ang. from the BP, delete it and its corresponding dummy atom
				print cat['dummydist:', dummydist];
				oDestroy [cAtoms chains(cnums(i)-1)];
				oDestroy [cAtoms chains(cnums(i))];
				scores2 = dropfirst scores2; // drop 0 score
				write ['Deleted {} because of distance from centroid.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
			elseif dummydist > 10 and scores(i) == 0 then
				print cat['dummydist:', dummydist];
				oDestroy [cAtoms chains(cnums(i)-1)];
				oDestroy [cAtoms chains(cnums(i))];
				scores2 = dropfirst scores2; // drop 0 score
				write ['Deleted {} because of distance from centroid.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
			elseif dummydist > 10 then
				print cat['dummydist:', dummydist];
				oDestroy [cAtoms chains(cnums(i)-1)];
				oDestroy [cAtoms chains(cnums(i))];
				scores2 = diff[scores2, scores(i)]; // remove deleted fragment's score from score matrix
				write ['Deleted {} because of distance from centroid.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
			endif
		endloop
		
		
		fnum = [];
		dummies = SelectedAtoms[]; // assign new dummy vector WITHOUT dummies that were too far from the centroid
		aSetSelected [Atoms[], 0]; // deselect dummies
		
		// END FRAGMENT TO CENTROID CHECK

		
		aSetSelected [dummies, 1];
		local dum_chains = oParent oParent dummies; // create vector of dummy atoms chains so they can be deleted if they don't fit the distance cutoff
		matrix = aDist [tr dummies, dummies]; // new distance matrix based on refreshed dummy vector
		
		local mat_scored = [scores: scores2, dist: matrix]; // assign mat_scored.scores as scores2, the vector containing scores of fragments that haven't been deleted. Scores and dist matrix should be the same size
		print mat_scored;
		chains = Chains[];
		local d, r;
		frag_delete = [];
		i=0; 	// reset count for new loop
		cnums = cNumber oParent oParent dummies;

		print mat_scored.dist;
		print length mat_scored.dist;

		for d in mat_scored.dist loop // loop through remainining fragments to see which overlap or are too far from other fragments. 
						  // scores2 remains the same and is checked, while mat_scored.scores is changed
			if length d > 1 then
				d = pack d;
			endif
			local fragtypes = rName cResidues dropfirst Chains[];
			local ft = fragtypes <> '*';
			print cat['d:', d];
			i = i+1;
			local s = scores2(i);
			fnum = cNumber chains(cnums(i)-1);

			if length pack (d < 0.5) > 0 and scores2(i) == 0 and freq [0, mat_scored.scores] > 1 and (fnum-1)/2 <> 1 then // fragments that overlap and have the same score
				oDestroy cAtoms chains(cnums(i)-1); // destroy fragment atoms (doesn't destroy fragment chain which ensures correct numbering ((fragment is before dummy chain, hence i-1)))
				dummies = diff[dummies, cAtoms dum_chains(i)]; // reassign new dummy vector by dropping deleted dummy for new distance calc.
				oDestroy cAtoms dum_chains(i); // destroy the dummy atom associated with the deleted fragment, necessary for new distance calculation
				write ['Deleted {} because of overlap.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
				print cat['d:', d];
				mat_scored.scores = dropfirst mat_scored.scores;
				mat_scored.dist = aDist [tr dummies, dummies];
				
			elseif length pack (d < 0.5) > 0 and anytrue (scores2(i) > mat_scored.scores) and (fnum-1)/2 <> 1 and length pack ft <> 1 then	
				oDestroy cAtoms chains(cnums(i)-1); // destroy fragment atoms (doesn't destroy fragment chain which ensures correct numbering ((fragment is before dummy chain, hence i-1)))
				dummies = diff[dummies, cAtoms dum_chains(i)];  // reassign new dummy vector by dropping deleted dummy for new distance calc.
				oDestroy cAtoms dum_chains(i);
				write ['Deleted {} because of overlap and score.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
				print cat['d:', d];
				mat_scored.scores = diff[mat_scored.scores, mat_scored.scores(indexof[s, mat_scored.scores])];
				mat_scored.dist = aDist [tr dummies, dummies];


			elseif length pack (d < 15) <= 1 and scores2(i) == 0 and length pack ft > 2  and (fnum-1)/2 <> 1 and length pack ft <> 1 then //and anytrue (mat_scored.scores(i) > mat_scored.scores) then
				oDestroy cAtoms chains(cnums(i)-1); // destroy fragment atoms (doesn't destroy fragment chain which ensures correct numbering ((fragment is before dummy chain, hence i-1)))
				dummies = diff[dummies, cAtoms dum_chains(i)];  // reassign new dummy vector by dropping deleted dummy for new distance calc.
				oDestroy cAtoms dum_chains(i);
				write ['Deleted {} because of distance from other fragments.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
				print cat['d:', d];
				mat_scored.scores = dropfirst mat_scored.scores;
				mat_scored.dist = aDist [tr dummies, dummies];
		

			elseif length pack (d < 15) <= 1 and length pack ft > 2  and (fnum-1)/2 <> 1 then
				oDestroy cAtoms chains(cnums(i)-1); // destroy fragment atoms (doesn't destroy fragment chain which ensures correct numbering ((fragment is before dummy chain, hence i-1)))
				dummies = diff[dummies, cAtoms dum_chains(i)];  // reassign new dummy vector by dropping deleted dummy for new distance calc.
				oDestroy cAtoms dum_chains(i);
				write ['Deleted {} because of distance from other fragments.\n', cat [cName chains(cnums(i)-1), (fnum-1)/2]]; 
				print cat['d:', d];
				mat_scored.scores = diff[mat_scored.scores, mat_scored.scores(indexof[s, mat_scored.scores])];
				mat_scored.dist = aDist [tr dummies, dummies];


			endif
		endloop
		
		aSetSelected [Atoms[], 0];
			
		chains = Chains[];
		local [rec_atoms] = cAtoms chains(1); // get receptor atoms
		local frags = dropfirst chains; // create subset of just fragments
		local frag_chain;
		local ligkeys = cat cAtoms frags;
		local dummy_mask = aElement ligkeys <> 'LP';
		ligkeys = ligkeys | dummy_mask;
		local use_frags = [];
		local sel_atoms = []; // empty vector for fragment atoms that are to be selected
		
		local itypes = ['Hbond', 'Metal', 'Ionic', 'Covalent', 'Arene', 'Distance'];
			local iopt = [
		emin_hb:	    minE[-0.1, 0.10],
		emin_hpi:	    minE[-0.1, 0.10],
		emin_ion:	    0.10,
		distance_threshold: 4.5, //4.5 default
		layoutrechb:	    1	// incl. rec-rec hbond in layout
		];

		
		//from prolig2d.svl, calculates fragments with strong interactions
		local iract = prolig_Calculate [itypes, ligkeys, rec_atoms, iopt];
		local [iract_2, iract_3] = [iract(2), iract(3)];
		local lrmask = indexof [iract_2, ligkeys] and indexof [iract_3, rec_atoms];
		local rlmask = indexof [iract_3, ligkeys] and indexof [iract_2, rec_atoms];
		local mask = andE [indexof [iract(1), ['Hbond', 'Metal', 'Ionic', 'Covalent']],lrmask or rlmask];
		local s_lim = select [iract(2), iract(3), lrmask] | mask;	// multi atom
		local s_rim = select [iract(3), iract(2), lrmask] | mask;	// for arene
		local s_score = iract(4) | mask;
		local s_score_sorted = sort s_score;
		local score;
		local s_lim_sorted = [];
		aSetSelected [s_lim,1]; //select atoms that have strong interactions
		write ['Fragments with strong interactions: {} \n', uniq cat [cName oParent oParent s_lim]]; 
		local atom;
		local ring_centroids = [];
		for score in s_score_sorted loop
			s_lim_sorted = cat [s_lim_sorted, get [s_lim, indexof [score, s_score]]];
		endloop;
		
		for atom in s_lim_sorted loop // for atoms with strong interactions
			print aElement atom;
			if [aIn6Ring atom] == 1 then // 6-ring fragments have hydrophobic centers, making a dummy atom conserves the Hyd center while allowing for removal of the AtomQ queries which are unnecessary
				rSetSelected [oParent atom, 1];
				centroid = oCentroid [oParent atom];
				local mol = mol_Create [ '', [ '', '', '', 1 ], 
				[ '*', 1, " ", 'none', 1 ], 
				[ 'LP', 0, 'sp', 0, 0, [ [] ], 0, 'DU', 0, centroid(1),centroid(2),centroid(3) ] ];
				ring_centroids = cat[ring_centroids, cAtoms last Chains[]];
			endif
			
			
			local [parent_atoms] = rAtoms oParent atom;
			local ox_mask = aElement parent_atoms == 'O';
			local n_mask = aElement parent_atoms == 'N';
			local ox_atoms = parent_atoms | ox_mask;
			local n_atoms = parent_atoms | n_mask;
			local [selected_ox] = aSelected [ox_atoms];
			local [selected_n] = aSelected [n_atoms];
			if cName oParent oParent atom == 'methylsulfonate' and aElement atom == 'O' and geE [add selected_ox, 2] == 1 then
				aSetSelected [atom, 0];
			endif
			
			if cName oParent oParent atom == 'acetate ion' and aElement atom == 'O' and geE [add selected_ox, 2] == 1 then
				aSetSelected [atom, 0];
			endif
			
			if cName oParent oParent atom == 'methyltetrazolium' and aElement atom == 'N' and geE [add selected_n, 2] == 1 then
				aSetSelected [atom, 0];
			endif
			
			if cName oParent oParent atom == 'methylguanidinium' and aElement atom == 'N' and geE [add selected_n, 2] == 1 then
				aSetSelected [atom, 0];
			endif
			
			if cName oParent oParent atom == 'methylamidinium' and aElement atom == 'N' and geE [add selected_n, 2] == 1 then
				aSetSelected [atom, 0];
			endif
		endloop
		
		local hyd_atom;
		local chain;	
		for chain in Chains[] loop	
			if cName chain == '3-methylindole' then // create hydrophobic annotation point for 3-MI hydrophobic 5-membered ring
				local [MIN_atoms] = cAtoms chain;
				if anytrue freq [MIN_atoms, s_lim] == 1 then // ensure that 3-MI atoms are in s_lim
					local fivering_mask = aIn5Ring MIN_atoms;
					local fivering_atoms = MIN_atoms | fivering_mask;
					centroid = oCentroid fivering_atoms;
					hyd_atom = mol_Create [ '', [ '', '', '', 1 ], 
					[ '*', 1, " ", 'none', 1 ], 
					[ 'C', 0, 'sp3', 0, 0, [ [] ], 0, 'C', 0, centroid(1),centroid(2),centroid(3) ] ];
					ring_centroids = cat[ring_centroids, cAtoms last Chains[]];
				endif
			endif
		endloop
		aSetSelected [ring_centroids,1]; //select centroids to annotate rings as Hyd
		
		

		local atoms = SelectedAtoms[];
		local atoms_type = ph4_aType atoms;
		local info = [atoms: atoms, atype: atoms_type];
		i=1;

		
		//run ph4 editor
		run '$MOE/svl/run/ph4_edit_2.svl';
		local wkey = ph4_EditorWkeyList [];
		WindowShow wkey;
		if notnull SelectedAtoms[] == 1 then
			WindowTrigger [wkey, [create_F:1024]];
				loop 
					chains = Chains[];
					local [features] = cAtoms last droplast chains;
					until notnull features
				endloop
		endif

		chains = Chains[];
		
		
		local data = ph4_EditorGetData wkey;
		local feat = [atoms: features, names: data.F.expr];
		
		local feat_name;
		local feat_delete = [];
		i=0;
		for feat_name in feat.names loop
			i=i+1;
			if feat_name == 'AtomQ' then
				feat_delete = cat [feat_delete,feat.atoms(i)];
			endif
		endloop
		
		
		aSetSelected [Atoms[],0]; //deselect all features
		aSetSelected [feat_delete,1]; //select AtomQ features to be deleted
		//return;
		sleep 2;
		local nvp = WindowValues wkey;
		local mainlist = nvp.mainlist(1);
		local tf = feat.names == 'AtomQ';
		loop
			if alltrue tf == 1 then
				WindowTrigger [wkey, [button_delete:1024]];
				break;
			elseif  length mainlist == length feat.atoms then // if selected atoms are all AtomQ then
				nvp = WindowValues wkey;
				mainlist = nvp.mainlist(1);
				break;
			elseif length mainlist < length feat.atoms then // if the mainlist length is less than the length of the feature atoms
				WindowTrigger [wkey, [button_delete:1024]];
				break;
			elseif length mainlist == 1 then
				WindowDestroy wkey;
				break;
			endif
		endloop
		
		sleep 1;
		[features] = cAtoms last droplast Chains[];
		features_length = length features;

		// from random_ph4gen.svl //
		loop
			[features] = cAtoms last droplast chains;	
	
			local nums;

			if length features == 13 then
				nums = [8,9,10,11,12,13];
			elseif length features == 12 then
				nums = [8,9,10,11,12];
			elseif length features == 11 then
				nums = [8,9,10,11];
			elseif length features == 10 then
				nums = [8,9,10];
			elseif length features == 9 then
				nums = [8,9];
			elseif length features == 8 then
				nums = [8];
			endif


			if length features > 7 then
				WindowTrigger [wkey, [mainlist:nums]];
				if length SelectedAtoms[] < length features then
					WindowTrigger [wkey, [button_delete:1024]];
				endif
			endif
			sleep 0.1;
			nvp = WindowValues wkey;
			mainlist = nvp.mainlist(1);
			if length features <= 7 then break;
			endif
		endloop
		// end from random_ph4gen.svl //
	
		[features] = cAtoms last droplast Chains[];
		features_length = length features;
	
		SaveAs tok_cat [sortfield, '_ph4_fragments.moe'];
		data = ph4_EditorGetData wkey;
		fwrite_PH4 [tok_cat [sortfield,'.ph4'], data, [header:1]];

		print cat['features:',features_length];
		sleep 2;
		if wkey == ph4_EditorWkeyList [] then
			WindowDestroy wkey;
		endif;
		
		if features_length < 7 then
			oDestroy dropfirst dropfirst Chains[]; // destroy everything except the receptor
		endif
	endloop;
		
	write ['Done.\n'];
	logfile[];	
	endfunction
///////////////////END PHARMACOPHORE GENERATION////////////////////////

///////////////////RUN SBP 7 FEATS////////////////////////
//function to generate ph4s for each score type present in 
//the MCSS output database

	local function run_SBP_7feats [receptor, database_file]

	fdelete ['dE(class).ph4','dE.ph4','dU(class).ph4','dU.ph4'];

	write 'Old ph4 files deleted.\n';

	//number entries in _output.mdb
	local entry_key;
	local entries = db_Entries database_file;
	local counter = 1;

	db_EnsureField [database_file, 'index','int'];
	for entry_key in entries loop
		db_Write [database_file, entry_key, tagpoke[[],'index', counter]];
		counter = counter + 1;
	endloop

	write 'Index created in output DB.\n';
	logfile tok_cat [receptor, '_ph4log.txt'];

	SBP_7feats [receptor, database_file, 'dE(class)'];

	write 'dE(class) ph4 generated.\n';

	if length flist[[], '*.ph4'] == 1 then
		SBP_7feats [receptor, database_file, 'dE'];
		write 'dE ph4 generated.\n';
	endif

	if length flist[[], '*.ph4'] == 2 then
		SBP_7feats [receptor, database_file, 'dU(class)'];
		write 'dU(class) ph4 generated.\n';
	endif


	if length flist[[], '*.ph4'] == 3 then
		SBP_7feats [receptor, database_file, 'dU'];
		write 'dU(class) ph4 generated.\n';
	endif

	write ['\n'];

	logfile[];

	//Warning 'Done, click OK.';

	endfunction

///////////////////END RUN SBP 7 FEATS////////////////////////

global function scorebased_ph4gen [fragment_sets]; //fragment_sets: 0 or 1, depending on whether ph4s are being generated for each fragment set or not
local folders = flist[];
local f_mask = ftype flist[] == 'dir';
folders = folders | f_mask;
local folder, receptor, database_file;

if fragment_sets == 0 then
	receptor = FilePrompt ['Input Structure Selection', 'open', []];
	database_file = FilePrompt ['MultiFragment Search Output Selection', 'open', []];
	run_SBP_7feats [receptor, database_file];
elseif fragment_sets == 1 then
	for folder in folders loop
		cd folder;
		receptor = flist[[], '*_minrec.moe'];
		database_file = flist[[], '*_output.mdb'];
		run_SBP_7feats [receptor, database_file];
		cd '..';
	endloop
endif 

Warning 'Done, click OK.';

endfunction
