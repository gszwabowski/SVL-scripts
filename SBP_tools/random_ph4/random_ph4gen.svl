#svl

//STRUCTURE BASED PHARMACOPHORE SAMPLING (for druglike fragments)
//
//This script is used to create pharmacophores based on a MultiFragment search output.
//Pharmacophores are capped at 5 features.

//need to incorporate loopnumber.svl into code

function Close;
function Open;
function prolig_Calculate;
function pro_Contacts;
function db_ImportASCII;
function ph4_aType;
function ph4_EditorWkeyList;
function ph4_EditorGetData;
function fwrite_PH4;
function ph4_Search;

global function random_ph4gen [receptor, database_file, samp_num, iter, n]
//run in subfolder to keep pharmacophore files contained
//receptor is *_minrec.moe, database_file is *_output.mdb
//default samp_num is 5, default iter is 5000
//
//only use the n variable if job crashes. If job does
//crash, n is the # of the last entry in output.mdb

if isnull flist [[], 'output.mdb'] then
	local output = db_Open ['output.mdb', 'create'];
	//db_CreateField [ output, 'Enrichment', 'float'];
	//db_CreateField [ output, 'GH', 'float'];
	//db_CreateField [ output, 'Active_Rate', 'float'];
	//db_CreateField [ output, 'Hits', 'int'];
	//db_CreateField [ output, 'Actives', 'int'];
	//db_CreateField [ output, 'Fragments', 'char'];
	//db_CreateField [ output, 'Numbers', 'char'];
	db_CreateField [ output, 'Fragment1', 'char'];
	db_CreateField [ output, 'Fragment1_mol', 'molecule'];
	db_CreateField [ output, 'Fragment2', 'char'];
	db_CreateField [ output, 'Fragment2_mol', 'molecule'];
	db_CreateField [ output, 'Fragment3', 'char'];
	db_CreateField [ output, 'Fragment3_mol', 'molecule'];
	db_CreateField [ output, 'Fragment4', 'char'];
	db_CreateField [ output, 'Fragment4_mol', 'molecule'];
	db_CreateField [ output, 'Fragment5', 'char'];
	db_CreateField [ output, 'Fragment5_mol', 'molecule'];
	db_CreateField [ output, 'Fragment1_num', 'int'];
	db_CreateField [ output, 'Fragment2_num', 'int'];
	db_CreateField [ output, 'Fragment3_num', 'int'];
	db_CreateField [ output, 'Fragment4_num', 'int'];
	db_CreateField [ output, 'Fragment5_num', 'int'];
	db_CreateField [ output, 'filename', 'char'];
else 
	output = 'output.mdb'; //just in case job crashes, don't overwrite output
endif

local iterations = 0;
//local n=0;
local e_vals = [];
local towrite;
local towrite2;
loop 
	Close [force:1, viewreset:1, delgobj:1];  // close any open structures
	Open receptor;
	local entry_key, entry, x;
	local mdb_key = db_Open [database_file, 'read-write']; //open database with fragments
	local entries = db_Entries database_file;
	local sample = sample [entries, samp_num];
	print sample;
	local centroids = [];
	local dummies = [];
	local i=0;
	local fragdata = [mol: [], name: [], number: []]; 
	local fdata = [names: [], number: [], mol: []];

	//number all fragments in database_file with an index #
	local counter = 1;
	db_EnsureField [mdb_key, 'index','int'];
	for entry_key in entries loop
		db_Write [mdb_key, entry_key, tagpoke[[],'index', counter]];
		counter = counter + 1;
	endloop
	//end fragment numbering

	for entry in sample loop // create all fragments
		local [ligand] = db_ReadFields [mdb_key, entry,'mol']; //get structure from fieldname
		fragdata.name = cat [fragdata.name, db_ReadFields [mdb_key, entry, 'name']];
		fragdata.number = cat [fragdata.number, db_ReadFields [mdb_key, entry, 'index']];
		
		local [ligand_chain, ligand_name] =db_CreateMolecule ligand;
		fragdata.mol = cat [fragdata.mol, ligand_chain];
		local num = indexof [ligand_chain, fragdata.mol];
		
		fdata.number = cat [fdata.number, num];
		fdata.names = cat [fdata.names, cName ligand_chain];
		fdata.mol = cat [fdata.mol, [mol_Extract oChildren ligand_chain]];
	endloop
	
	local chains = Chains[];
	local [rec_atoms] = cAtoms chains(1); // get receptor atoms
	local frags = dropfirst Chains[]; // create subset of just fragments
	local frag_chain;
	local ligkeys = cat cAtoms frags;
	local use_frags = [];
	local sel_atoms = []; // empty vector for fragment atoms that are to be selected
	
	local itypes = ['Hbond', 'Metal', 'Ionic', 'Covalent', 'Arene', 'Distance'];
    	local iopt = [
	emin_hb:	    minE[-0.1, 0.10],
	emin_hpi:	    minE[-0.1, 0.10],
	emin_ion:	    0.10,
	distance_threshold: 4.5,
	layoutrechb:	    1	// incl. rec-rec hbond in layout
    ];

	//from prolig2d.svl
	local iract = prolig_Calculate [itypes, ligkeys, rec_atoms, iopt];
	local [iract_2, iract_3] = [iract(2), iract(3)];
	local lrmask = indexof [iract_2, ligkeys] and indexof [iract_3, rec_atoms];
	local rlmask = indexof [iract_3, ligkeys] and indexof [iract_2, rec_atoms];
	local mask = andE [indexof [iract(1), ['Hbond', 'Metal', 'Ionic', 'Covalent']],lrmask or rlmask];
	local s_lim = select [iract(2), iract(3), lrmask] | mask;	// multi atom
   	local s_rim = select [iract(3), iract(2), lrmask] | mask;	// for arene
	local s_score = iract(4) | mask;
	local s_frag_atoms = cat rAtoms oParent s_lim;
	local sel_atom = diff [ligkeys, s_frag_atoms];

	
	//print fdata;
	//return;

	frags = dropfirst Chains[]; //re-assign fragments
	local atom;
	local frag_atoms = cat cAtoms frags;
	local ring_atoms =[];
	aSetSelected [s_lim,1];
	for atom in s_lim loop // for atoms with strong interactions
		if [aIn6Ring atom] == 1 then
			rSetSelected [oParent atom, 1];
			ring_atoms = cat [ring_atoms, atom];
			local centroid = oCentroid [oParent atom];
			local mol = mol_Create [ '', [ '', '', '', 1 ], 
			[ '*', 1, " ", 'none', 1 ], 
			[ 'LP', 0, 'sp', 0, 0, [ [] ], 0, 'DU', 0, centroid(1),centroid(2),centroid(3) ] ];
			centroids = cat[centroids, cAtoms last Chains[]];
			aSetSelected [atom, 0];
		endif
	endloop
	
	aSetSelected [centroids,1]; //select centroids
	
	local atoms = SelectedAtoms[];
	local atoms_type = ph4_aType atoms;
	local info = [atoms: atoms, atype: atoms_type];
	i=1;

	
	//run ph4 editor
	run '$HOME/ph4_edit_2.svl';
	local wkey = ph4_EditorWkeyList [];
	WindowShow wkey;
	WindowTrigger [wkey, [create_F:1024]];
		loop 
			chains = Chains[];
			local [features] = cAtoms last droplast chains;
 			until notnull features
		endloop

	chains = Chains[];

	[features] = cAtoms last droplast Chains[];
	
	local data = ph4_EditorGetData wkey;
	local feat = [atoms: features, names: data.F.expr];
	
	local feat_name;
	local feat_delete = [];
	i=0;
	for feat_name in feat.names loop
		i=i+1;
		if alltrue [feat.names == 'AtomQ'] then break;
		elseif feat_name == 'AtomQ' then
			feat_delete = cat [feat_delete,feat.atoms(i)];
		endif
	endloop
	
	oDestroy oParent oParent ring_atoms;
	
	aSetSelected [Atoms[],0]; //deselect all features
	aSetSelected [feat_delete,1]; //select AtomQ features to be deleted
	
	local nvp = WindowValues wkey;
	local mainlist = nvp.mainlist(1);
	
	loop
		if  length mainlist == length feat.atoms then
		nvp = WindowValues wkey;
		mainlist = nvp.mainlist(1);
		elseif length mainlist < length feat.atoms then
		WindowTrigger [wkey, [button_delete:1024]];
		break;
		
		endif
	endloop

	loop
	[features] = cAtoms last droplast chains;

	local nums;

	if length features == 13 then
		nums = [6,7,8,9,10,11,12,13];
	elseif length features == 12 then
		nums = [6,7,8,9,10,11,12];
	elseif length features == 11 then
		nums = [6,7,8,9,10,11];
	elseif length features == 10 then
		nums = [6,7,8,9,10];
	elseif length features == 9 then
		nums = [6,7,8,9];
	elseif length features == 8 then
		nums = [6,7,8];
	elseif length features == 7 then
		nums = [6,7];
	elseif length features == 6 then
		nums = [6];
	endif

	//print length features;

	if length features > 5 then
		WindowTrigger [wkey, [mainlist:nums]];
		if length SelectedAtoms[] < length features then
			WindowTrigger [wkey, [button_delete:1024]];
		endif
	endif
	nvp = WindowValues wkey;
	mainlist = nvp.mainlist(1);
	if length features <= 5 then break;
	endif
	endloop

	n=n+1;
	
	data = ph4_EditorGetData wkey;
	fwrite_PH4 [tok_cat [totok n,'.ph4'], data, [header:1]];
	//if length flist[[],'*.ph4'] == n then
	//WindowTrigger [wkey, [button_delete:1024]];
	WindowDestroy wkey;
	
	//endif
	iterations= iterations+1;
	

	db_Write [
	output, 0, [
	Fragment1: swrite ['{G}', fdata.names(1)],
	Fragment1_mol:  fdata.mol(1),
	Fragment2: swrite ['{G}', fdata.names(2)],
	Fragment2_mol: fdata.mol(2),
	Fragment3: swrite ['{G}', fdata.names(3)],
	Fragment3_mol: fdata.mol(3),
	Fragment4: swrite ['{G}', fdata.names(4)],
	Fragment4_mol: fdata.mol(4),
	Fragment5: swrite ['{G}', fdata.names(5)],
	Fragment5_mol: fdata.mol(5),
	Fragment1_num: fragdata.number(1),
	Fragment2_num: fragdata.number(2),
	Fragment3_num: fragdata.number(3),
	Fragment4_num: fragdata.number(4),
	Fragment5_num: fragdata.number(5),
	filename: swrite ['{G}', tok_cat [totok n,'.ph4']]
		]
	];
	
	
	print cat['iteration:', n];
	//return;
	until iterations==iter
endloop	

//print e_vals;	
print 'done creating database';

entries = db_Entries output;
counter = 1;

db_CreateField [output, 'index','int'];
for entry_key in entries loop
	db_Write [output, entry_key, tagpoke[[],'index', counter]];
	counter = counter + 1;
endloop

print 'done numbering database';

Open 'output.mdb';
//print fdata;
endfunction
