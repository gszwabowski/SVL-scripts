//Edit/Commentary by Greg Szwabowski 5/13/19
// This script adds a receptor column entry to a database of docked rigid receptor ligand poses, which is necessary
// if you want to use my "ligandrmsd.svl" script with rigid receptor ligand docking results.
//
// database_file is your database with ligand poses, database_file2 is your database containing your receptor models, entry_number is which # receptor to import
// a reference .moe or .pdb with your crystal structure, .mdb with top 10 scoring receptor models, and .mdb with ligand poses need be in the same directory

#svl
function Close;       
function pro_Superpose;
function pro_Align;
global function rigidDBadd [database_file, database_file2, database_field2, entry_number];

		Close [force:1, viewreset:1, delgobj:1];  // close any open structures
		local mdb_key = db_Open [database_file, 'read-write'];
		local mdb_key2 = db_Open [database_file2, 'read-write'];
  		local entry_key, newmol, rec_entries, ligand, receptor, atoms2, ligand_chain, ligand_name, receptor_chain, receptor_name, ref_chains, mask, ref_residues, rec_residues, ref_ligand, ligand_heavy, ref_heavy;   	
		local entries = db_Entries mdb_key;
		local atoms;
//  create field for receptor
        db_CreateField [mdb_key,'S-S bonded','molecule'];
		
//  open receptor
		rec_entries = dbv_Entries [database_file2];
		[receptor] =db_ReadFields [mdb_key2, rec_entries(entry_number), [database_field2]];
		[receptor_chain, receptor_name] =db_CreateMolecule receptor;
		newmol = mol_Extract Chains[];

		
//  loop through the database and add receptor models
        for entry_key in entries loop
//   write receptor to the database
               db_Write [mdb_key, entry_key, tagpoke[[],'S-S bonded', newmol]];
		

endloop

print 'done';

endfunction
