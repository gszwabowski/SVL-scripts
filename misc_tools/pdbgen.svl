// Edit/Commentary by Greg Szwabowski 5/13/19
// 
// Used prior Rosetta Docking to generate input .pdbs
//
// This script extracts a receptor from a database, superposes the receptor onto a reference structure
// (as to correct for coordinate differences, same coordinates help with RMSD calculations), and then 
// pulls up a prompt in MOE to save your strucure. If I wanted to name a strucure "receptor" and have
// it save as a .pdb, in the prompt box I'd save it named as "receptor.pdb" even with pdb selected as
// the "save as" filetype. 
//
// reference_file is your crystal structure with ligand and receptor
// database_file is a database containing your receptors you want to use as inputs for Rosetta docking
// database_field1 is your column containing receptor models in the database, most likely "S-S bonded" or "receptor"
//
#svl
function Close;       
function pro_Superpose;
function pro_Align;
global function pdbgen [reference_file, database_file, database_field1]
	Close [force:1, viewreset:1, delgobj:1];  // close any open structures
	local mdb_key = db_Open [database_file, 'read-write'];
 	local entry_key, receptor, receptor_chain, receptor_name, ref_chains, id, a, idfield;   	
	local entries = db_Entries mdb_key;
		
//  loop through the database to read each receptor
        	for entry_key in entries loop
		Open reference_file;
		print Chains[];
		[receptor] =db_ReadFields [mdb_key, entry_key, [database_field1]];
		[receptor_chain, receptor_name] =db_CreateMolecule receptor;

//	align & superpose chains
		pro_Align[Chains[]];
		pro_Superpose[[Chains[]], [auto_associate:1, accent_conserved: 1]];

//delete reference file & ligand
		oDestroy (get [(Chains[]), 1]);
		oDestroy (get [(Chains[]), 1]);
		
//save .pdb
		print Chains[];	
		WritePDB [];
///delete receptor
		oDestroy receptor_chain;
	endloop
endfunction
