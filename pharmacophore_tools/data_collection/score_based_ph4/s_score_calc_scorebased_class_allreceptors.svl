function prolig_Calculate;
global function s_score_calc_scorebased_class_allreceptors [subset_folder];
local frag1_chain, frag2_chain, frag3_chain, frag4_chain, frag5_chain;
local frag1_name, frag2_name, frag3_name, frag4_name, frag5_name;

local mdb_key = db_Open [tok_cat ['s_score_class_', subset_folder, '.mdb'], 'create'];
db_EnsureField [mdb_key, 'receptor', 'char' ];
db_EnsureField [mdb_key, 's_score', 'float' ];

local rec_folders = get [flist[], [1,2,3,4,5,6,7,8,9,10,11,12,13]];
local rec_folder;

for rec_folder in rec_folders loop
	cd rec_folder;
	print rec_folder;
	cd subset_folder;
	local fragfiles = flist[[], '*(class)_ph4_fragments.moe'];
	local fragfile;
		for fragfile in fragfiles loop
			Close [force:1, viewreset:1, delgobj:1];  // close any open structures
			Open fragfile;
			local chains = Chains[];
			local [rec_atoms] = cAtoms chains(1); // get receptor atoms
			local frags = dropfirst chains; // create subset of just fragments
			local frag_chain;
			local ligkeys = cat cAtoms frags;
			local dummy_mask = aElement ligkeys <> 'LP';
			ligkeys = ligkeys | dummy_mask;
			//aSetSelected [ligkeys, 1];
			local use_frags = [];
			local sel_atoms = []; // empty vector for fragment atoms that are to be selected
				
			local itypes = ['Hbond', 'Metal', 'Ionic', 'Covalent', 'Arene', 'Distance'];
				local iopt = [
					emin_hb:	    minE[-0.1, 0.10],
					emin_hpi:	    minE[-0.1, 0.10],
					emin_ion:	    0.10,
					distance_threshold: 4.5, //4.5 default
					layoutrechb:	    1	// incl. rec-rec hbond in layout
					];
			
			//from prolig2d.svl, calculates fragments with strong interactions
			local iract = prolig_Calculate [itypes, ligkeys, rec_atoms, iopt];
			aSetSelected [ligkeys, 1];
			local [iract_2, iract_3] = [iract(2), iract(3)];
			local lrmask = indexof [iract_2, ligkeys] and indexof [iract_3, rec_atoms];
			local rlmask = indexof [iract_3, ligkeys] and indexof [iract_2, rec_atoms];
			local mask = andE [indexof [iract(1), ['Hbond', 'Metal', 'Ionic', 'Covalent']],lrmask or rlmask];
			//local arene_mask = andE [iract(1) == 'Arene', lrmask or rlmask];
			//mask = mask or arene_mask;
			local s_lim = select [iract(2), iract(3), lrmask] | mask;	// multi atom
			local s_rim = select [iract(3), iract(2), lrmask] | mask;	// for arene
			local s_score = iract(4) | mask;
			local mean_score = (add s_score)/(length s_score);
			//local mean_scoreall = (add iract(4)/(length iract(4)));
			write ['Mean score: {}\n', (add s_score)/(length s_score)];
			local value = [
				receptor: swrite ['{G}', rec_folder],
				s_score: mean_score];
			
			db_Write [mdb_key, 0, value];
		endloop
	cd '../..';
endloop

write 'Done.\n';	
 
endfunction;
